I set up an Amazon EC2 instance, configured it to work as my self-hosted Github Actions runner, and installed Nodejs and its required tools to be able to run the application.

That installation can take some time, hence why I went for it first - while it's running, I'm setting up the project's Typescript and ESLint configs to get started.
I'm also adding a couple of husky hooks for smooth installation and, more importantly, having ESLint and Prettier run when committing.

Now, I'm getting the bare-bones of the Express application running. After that, I'm setting up code validations - compiling Typescript and running ESLint - and the application deployment, both via Github Actions. This proved to be quite the hassle to configure, due to the setup-node action freezing (searching for this showed it has happened to others, too, but I could not find a reliable solution) and I ended up with a far from optimal solution, using the runner's own installed Nodejs. It takes far longer (~10 min) to perform the dependency installation on each run, but it does succeed, so I'm leaving it at this to focus on the code.

I'm connecting to a MongoDB database and creating an entry to log the timestamp of the last data update - to establish a minimum amount of time before the application updates its food truck data, so as not to fetch this information every time a request is made, but also not keeping it entirely out-of-date.

After a lot of issues, I'm halting my efforts on attempting to make the Amazon EC2 instance accessible, and will instead provide it as a local-running application for now. Despite apparently configuring the proper network rules, it's still unreachable.

I'm adding the main functionality to the core endpoint of listing food trucks, to allow filtering / searching by one or more food items.

Things I would do if I had more time and if the application was to grow:

- a front-end, simple as may be - it'd be great to display the info and make filtering intuitive;

- proper error handling;

- more filtering options, rather than just food items;

- OpenAPI spec;

- proper hosting of the application with Docker;

- proper environment variable handling of the connection string,

- probably many other things that would come up along the way.


This is the first time I actually attempt to set-up an Amazon EC2 instance, rather than relying on an Ops team for it, and so it consumed a significant portion of my time on this.
Overall, this was an excellent experience and challenge, and I thank you for it!
